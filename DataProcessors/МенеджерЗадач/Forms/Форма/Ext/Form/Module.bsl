 
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	ПолучитьАдресСервера();	
	ВыполнитьАвторизациюПоRefreshТокену();
	
КонецПроцедуры 

Процедура УстановитьВидимостьКнопкиВыйти(Видимость)
	
	КнопкаВыйти = ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.Найти("ФормаВыйти");
   	КнопкаВыйти.Видимость = Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ЗавершитьРаботуСистемы(Ложь);
	
КонецПроцедуры

 #Область Авторизация
 
&НаСервере
Процедура ВойтиНаСервере()
		
	АдресРесурса = СтрШаблон("%1/auth/v1/token", Объект.АдресСервера);
	
	Аутенфикация = КоннекторHTTP.НоваяАутентификацияBasic(Логин, Пароль);
	ДополнительныеПараметрыЗапроса = КоннекторHTTP.НовыеПараметры();
	ДополнительныеПараметрыЗапроса.Аутентификация = Аутенфикация;
	
	Попытка
		Ответ = КоннекторHTTP.Post(АдресРесурса, , ДополнительныеПараметрыЗапроса);
	Исключение
		Сообщить("Ошибка подключения. Проверьте интернет или обратитесь в поддержку", СтатусСообщения.Важное);
		Возврат;
	КонецПопытки;
	
	Если Ответ.КодСостояния > 300 Тогда		
		Если Ответ.КодСостояния = 401 Тогда
			Сообщить("Неверный логин или пароль", СтатусСообщения.Важное);
			Возврат;	
		Иначе
			Сообщить("Что-то пошло не так. Обратитесь в поддержку", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;	
	КонецЕсли;;
	
	Попытка		
		ПараметрыПреобразования = Новый Структура;
		ПараметрыПреобразования.Вставить("ПрочитатьВСоответствие", Ложь);	
		
		Данные = КоннекторHTTP.КакJson(Ответ, ПараметрыПреобразования);
	Исключение
		Сообщить("Ошибка разбора ответа сервера. Обратитесь в поддержку", СтатусСообщения.Важное);
		Возврат;	
	КонецПопытки;
	
	Объект.AccessToken = Данные.accessToken;
	Объект.RefreshToken = Данные.refreshToken;
	Объект.ВремяЖизниТокена = ТекущаяДатаСеанса() + Данные.expires;
	
	Если Объект.Запомнить Тогда
		Константы.RefreshТокен.Установить(Объект.RefreshToken);	
	КонецЕсли;
	
	ПерейтиКСпискуЗадач();
	
	Логин = "";
	Пароль = "";
	
КонецПроцедуры

&НаКлиенте
Процедура Войти(Команда)
	
	ВойтиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВыйтиНаСервере()
	
	АдресРесурса = СтрШаблон("%1/auth/v1/refresh", Объект.АдресСервера);
	
	ДанныеJSON = Новый Структура;
	ДанныеJSON.Вставить("RefreshToken", Объект.RefreshToken);
	
	ДополнительныеПараметрыЗапроса = КоннекторHTTP.НовыеПараметры();
	ДополнительныеПараметрыЗапроса.Json = ДанныеJSON;
	
	Попытка
		Ответ = КоннекторHTTP.Delete(АдресРесурса,, ДополнительныеПараметрыЗапроса);
	Исключение
	КонецПопытки;
			
	ПерейтиКАвторизации();
	
КонецПроцедуры

&НаКлиенте
Процедура Выйти(Команда)
	
	ВыйтиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьАвторизациюПоRefreshТокену()

	Объект.RefreshToken = Константы.RefreshТокен.Получить();
	Если Не ЗначениеЗаполнено(Объект.RefreshToken) Тогда 
		Возврат;	
	КонецЕсли;
	
	Объект.Запомнить = Истина;	
	ОбъектЗнач = РеквизитФормыВЗначение("Объект");
	
	Попытка
		ОбъектЗнач.ОбновитьТокены();
		ЗначениеВРеквизитФормы(ОбъектЗнач, "Объект");
	Исключение
		Возврат;
	КонецПопытки;
	
	ПерейтиКСпискуЗадач();
	
КонецПроцедуры

#КонецОбласти

#Область Задачи
 
&НаСервере
Процедура ПолучитьЗадачи(Повтор = Ложь)
	
	СписокЗадач.Очистить();
	
	АдресРесурса = СтрШаблон("%1/api/v1/task", Объект.АдресСервера);
	
	Заголовоки = Новый Соответствие;
	Заголовоки.Вставить("Authorization", "Bearer " + Объект.AccessToken);
	
	ДополнительныеПараметрыЗапроса = КоннекторHTTP.НовыеПараметры();
	ДополнительныеПараметрыЗапроса.Заголовки = Заголовоки;
	
	Попытка
		Ответ = КоннекторHTTP.Get(АдресРесурса,, ДополнительныеПараметрыЗапроса);
	Исключение		
		Сообщить("Ошибка подключения. Проверьте интернет или обратитесь в поддержку", СтатусСообщения.Важное);
		Возврат;
	КонецПопытки;
	
	Если Ответ.КодСостояния > 300 Тогда				
		Если Ответ.КодСостояния = 401
			ИЛИ Ответ.КодСостояния = 402 Тогда
			
			ОбъектЗнач = РеквизитФормыВЗначение("Объект");
			Попытка
				Если Не Повтор Тогда
					ОбъектЗнач.ОбновитьТокены();
					ЗначениеВРеквизитФормы(ОбъектЗнач, "Объект");
					ПолучитьЗадачи(Истина);
					Возврат;
				Иначе
					ПерейтиКАвторизации();
					Возврат;	
				КонецЕсли;
			Исключение
				ПерейтиКАвторизации();
				Возврат;
			КонецПопытки;
		ИначеЕсли Ответ.КодСостояния = 403 Тогда
			Сообщить("Недостаточно прав для работы с задачами", СтатусСообщения.Важное);
			Возврат;
		Иначе
			Сообщить("Что-то пошло не так. Обратитесь в поддержку", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;	
	КонецЕсли;;
	
	Попытка		
		ИменаСвойствСоЗначениямиДата = Новый Массив;
		ИменаСвойствСоЗначениямиДата.Добавить("ReceiptDate");
		ИменаСвойствСоЗначениямиДата.Добавить("Deadline");
		
		ПараметрыПреобразования = Новый Структура;
		ПараметрыПреобразования.Вставить("ПрочитатьВСоответствие", Ложь);
		ПараметрыПреобразования.Вставить("ИменаСвойствСоЗначениямиДата", ИменаСвойствСоЗначениямиДата);
		ПараметрыПреобразования.Вставить("ВариантЗаписиДатыJSON", ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением);
		
		Данные = КоннекторHTTP.КакJson(Ответ, ПараметрыПреобразования);
	Исключение						
		Сообщить("Ошибка разбора ответа сервера. Обратитесь в поддержку", СтатусСообщения.Важное);
		Возврат;	
	КонецПопытки;
	
	Для Каждого Стр Из Данные Цикл
		ЗаполнитьЗначенияСвойств(СписокЗадач.Добавить(), Стр);	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СписокЗадачОбработкаЗапросаОбновленияНаСервере()
	
	ПолучитьЗадачи();

КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачОбработкаЗапросаОбновления()
	
	СписокЗадачОбработкаЗапросаОбновленияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.СписокЗадач.ТекущиеДанные;
		
	СтруктураТекущиеДанные = Новый Структура("ID,Address,ApplicationText,Deadline,Initiator,Partner,Phone,ReceiptDate,Responsible,Status,Type");
	ЗаполнитьЗначенияСвойств(СтруктураТекущиеДанные, ТекущиеДанные);
	
	СтруктураПараметров = Новый Структура("СтруктураЗадачи", СтруктураТекущиеДанные);
	СтруктураПараметров.Вставить("Объект", Объект);
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ОбновитьЗадачи", ЭтотОбъект);
	ОткрытьФорму("Обработка.МенеджерЗадач.Форма.ФормаЗадачи", СтруктураПараметров, ЭтаФорма, Истина,,, ОбработкаЗавершения); 
	
КонецПроцедуры

&НаКлиенте
Процедура Добавить(Команда)
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ОбновитьЗадачи", ЭтотОбъект);
	ПараметрыОткрытияФормы = Новый Структура("Объект", Объект);
	ОткрытьФорму("Обработка.МенеджерЗадач.Форма.ФормаЗадачи", ПараметрыОткрытияФормы, ЭтаФорма, Истина,,, ОбработкаЗавершения); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗадачи(Ответ, Параметры) Экспорт
	
	Если ТипЗнч(Ответ) = Тип("Строка") 
		И Ответ = "ПерейтиКАвторизации" Тогда
		
		ПерейтиКАвторизации();
		Возврат;
	КонецЕсли;
	
	КопироватьДанныеФормы(Ответ.Объект, ЭтаФорма.Объект);
		
	ПолучитьЗадачи();
	
КонецПроцедуры

#КонецОбласти

#Область КешируемыеЗначения

&НаСервере
Процедура ПолучитьПрава(Повтор = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КешируемыеЗначения.Тип КАК Тип,
	|	КешируемыеЗначения.КешированныеДанные КАК КешированныеДанные,
	|	КешируемыеЗначения.СрокЖизни КАК СрокЖизни
	|ИЗ
	|	РегистрСведений.КешируемыеЗначения КАК КешируемыеЗначения
	|ГДЕ
	|	КешируемыеЗначения.Тип = ""Права""";
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл		
		Если Результат.СрокЖизни <= ТекущаяДатаСеанса() Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПрав = Результат.КешированныеДанные.Получить();
		ЗаполнитьЗначенияСвойств(Объект, СтруктураПрав);		
		Возврат;	
	КонецЦикла;
	
	АдресРесурса = СтрШаблон("%1/api/v1/role", Объект.АдресСервера);
	
	Заголовоки = Новый Соответствие;
	Заголовоки.Вставить("Authorization", "Bearer " + Объект.AccessToken);
	
	ДополнительныеПараметрыЗапроса = КоннекторHTTP.НовыеПараметры();
	ДополнительныеПараметрыЗапроса.Заголовки = Заголовоки;
	
	Попытка
		Ответ = КоннекторHTTP.Get(АдресРесурса,, ДополнительныеПараметрыЗапроса);
	Исключение		
		Сообщить("Ошибка подключения. Проверьте интернет или обратитесь в поддержку", СтатусСообщения.Важное);
		Возврат;
	КонецПопытки;
	
	Если Ответ.КодСостояния > 300 Тогда	
				
		Если Ответ.КодСостояния = 401
			ИЛИ Ответ.КодСостояния = 402 Тогда
			
			ОбъектЗнач = РеквизитФормыВЗначение("Объект");
			Попытка
				Если Не Повтор Тогда
					ОбъектЗнач.ОбновитьТокены();
					ЗначениеВРеквизитФормы(ОбъектЗнач, "Объект");
					ПолучитьПрава(Истина);
				Иначе
					Сообщить("Что-то пошло не так. Обратитесь в поддержку", СтатусСообщения.Важное);
					Возврат;	
				КонецЕсли;
			Исключение
				Сообщить("Что-то пошло не так. Обратитесь в поддержку", СтатусСообщения.Важное);
				Возврат;
			КонецПопытки;
		Иначе
			Сообщить("Что-то пошло не так. Обратитесь в поддержку", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;	
	КонецЕсли;;
	
	Попытка
				
		ПараметрыПреобразования = Новый Структура;
		ПараметрыПреобразования.Вставить("ПрочитатьВСоответствие", Ложь);
		
		Данные = КоннекторHTTP.КакJson(Ответ, ПараметрыПреобразования);
	Исключение						
		Сообщить("Ошибка разбора ответа сервера. Обратитесь в поддержку", СтатусСообщения.Важное);
		Возврат;	
	КонецПопытки;
	
    ЗаполнитьЗначенияСвойств(Объект, Данные);
	
	Если Объект.Запомнить Тогда
		НаборЗаписей = РегистрыСведений.КешируемыеЗначения.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Тип.Установить("Права");
		
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		
		НоваяСтрока = НаборЗаписей.Добавить();
		НоваяСтрока.Тип = "Права";
		НоваяСтрока.КешированныеДанные = Новый ХранилищеЗначения(Данные);
		НоваяСтрока.СрокЖизни = ТекущаяДатаСеанса() + 60 * 60 * 24;
		
		НаборЗаписей.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьИнформацию(Повтор = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КешируемыеЗначения.Тип КАК Тип,
	|	КешируемыеЗначения.КешированныеДанные КАК КешированныеДанные,
	|	КешируемыеЗначения.СрокЖизни КАК СрокЖизни
	|ИЗ
	|	РегистрСведений.КешируемыеЗначения КАК КешируемыеЗначения
	|ГДЕ
	|	КешируемыеЗначения.Тип = ""Информация""";
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл		
		Если Результат.СрокЖизни <= ТекущаяДатаСеанса() Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураИнформация = Результат.КешированныеДанные.Получить();
		ЗаполнитьЗначенияСвойств(Объект, СтруктураИнформация);		
		Возврат;	
	КонецЦикла;
	
	АдресРесурса = СтрШаблон("%1/api/v1/info", Объект.АдресСервера);
	
	Заголовоки = Новый Соответствие;
	Заголовоки.Вставить("Authorization", "Bearer " + Объект.AccessToken);
	
	ДополнительныеПараметрыЗапроса = КоннекторHTTP.НовыеПараметры();
	ДополнительныеПараметрыЗапроса.Заголовки = Заголовоки;
	
	Попытка
		Ответ = КоннекторHTTP.Get(АдресРесурса,, ДополнительныеПараметрыЗапроса);
	Исключение		
		Сообщить("Ошибка подключения. Проверьте интернет или обратитесь в поддержку", СтатусСообщения.Важное);
		Возврат;
	КонецПопытки;
	
	Если Ответ.КодСостояния > 300 Тогда	
				
		Если Ответ.КодСостояния = 401
			ИЛИ Ответ.КодСостояния = 402 Тогда
			
			ОбъектЗнач = РеквизитФормыВЗначение("Объект");
			Попытка
				Если Не Повтор Тогда
					ОбъектЗнач.ОбновитьТокены();
					ЗначениеВРеквизитФормы(ОбъектЗнач, "Объект");
					ПолучитьИнформацию(Истина);
				Иначе
					Сообщить("Что-то пошло не так. Обратитесь в поддержку", СтатусСообщения.Важное);
					Возврат;	
				КонецЕсли;
			Исключение
				Сообщить("Что-то пошло не так. Обратитесь в поддержку", СтатусСообщения.Важное);
				Возврат;
			КонецПопытки;
		Иначе
			Сообщить("Что-то пошло не так. Обратитесь в поддержку", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;	
	КонецЕсли;;
	
	Попытка				
		ПараметрыПреобразования = Новый Структура;
		ПараметрыПреобразования.Вставить("ПрочитатьВСоответствие", Ложь);
		
		Данные = КоннекторHTTP.КакJson(Ответ, ПараметрыПреобразования);
	Исключение						
		Сообщить("Ошибка разбора ответа сервера. Обратитесь в поддержку", СтатусСообщения.Важное);
		Возврат;	
	КонецПопытки;
	
	Для Каждого СтрСтатус Из Данные.Status Цикл		
		Объект.Status.Добавить(СтрСтатус.name, СтрСтатус.presentation); 		
	КонецЦикла;
	
	Для Каждого СтрТип Из Данные.Type Цикл		
		Объект.Type.Добавить(СтрТип.name, СтрТип.presentation); 		
	КонецЦикла;
	
	Для Каждого СтрКонтрагент Из Данные.Partner Цикл		
		Объект.Partner.Добавить(СтрКонтрагент.name, СтрКонтрагент.name); 		
	КонецЦикла;
	
	Для Каждого СтрОтветственные Из Данные.Responsible Цикл		
		Объект.Responsible.Добавить(СтрОтветственные.name, СтрОтветственные.name); 		
	КонецЦикла;
	
	Если Объект.Запомнить Тогда		
		СтруктураИнформация = Новый Структура;
		СтруктураИнформация.Вставить("Status", Объект.Status);
		СтруктураИнформация.Вставить("Type", Объект.Type);
		СтруктураИнформация.Вставить("Responsible", Объект.Responsible);
		СтруктураИнформация.Вставить("Partner", Объект.Partner);
		
		НаборЗаписей = РегистрыСведений.КешируемыеЗначения.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Тип.Установить("Информация");
		
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		
		НоваяСтрока = НаборЗаписей.Добавить();
		НоваяСтрока.Тип = "Информация";
		НоваяСтрока.КешированныеДанные = Новый ХранилищеЗначения(СтруктураИнформация);
		НоваяСтрока.СрокЖизни = ТекущаяДатаСеанса() + 60 * 60 * 24 * 3;
		
		НаборЗаписей.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Навигация

&НаСервере
Процедура ПерейтиНаСтраницу(Страница)
	
	ПереходНаСтраницу = ЭтаФорма.Элементы.Страницы.ПодчиненныеЭлементы.Найти(Страница);
	ЭтаФорма.Элементы.Страницы.ТекущаяСтраница = ПереходНаСтраницу;  
	
КонецПроцедуры

&НаСервере
Процедура ПерейтиКСпискуЗадач()
	
	ПолучитьПрава();
	ПолучитьИнформацию();	
	УстановитьЗначенияВыбораОтборов();
	
	Если Объект.Reading Тогда
		ПолучитьЗадачи();
	Иначе
		Сообщить("Недостаточно прав для работы с задачами", СтатусСообщения.Важное);
	КонецЕсли;
		
	Элементы.Добавить.Видимость = Объект.Addition;
	
	УстановитьВидимостьКнопкиВыйти(Истина);
	ПерейтиНаСтраницу("РаботаСЗадачами");
	
КонецПроцедуры

&НаСервере
Процедура ПерейтиКАвторизации()
	
	Если Объект.Запомнить Тогда
		Константы.RefreshТокен.Установить("");
	КонецЕсли;
	
	Объект.AccessToken  = "";
	Объект.RefreshToken = "";
	Объект.ВремяЖизниТокена = '00010101';
	
	НаборЗаписей = РегистрыСведений.КешируемыеЗначения.СоздатьНаборЗаписей();	
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();	
	НаборЗаписей.Записать(Истина);
	
	УстановитьВидимостьКнопкиВыйти(Ложь);
	ПерейтиНаСтраницу("Авторизация");
	
КонецПроцедуры

#КонецОбласти

#Область Отборы

&НаСервере
Процедура УстановитьОтборы()
	
	ОтборЗадан = Ложь;
	
    СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Partner) Тогда
		СтруктураОтбора.Вставить("Partner", Partner);
		ОтборЗадан = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Status) Тогда
		СтруктураОтбора.Вставить("Status", Status);
		ОтборЗадан = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Type) Тогда
		СтруктураОтбора.Вставить("Type", Type);
		ОтборЗадан = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Responsible) Тогда
		СтруктураОтбора.Вставить("Responsible", Responsible);
		ОтборЗадан = Истина;
	КонецЕсли;
	
	Если ОтборЗадан Тогда
		Элементы.СписокЗадач.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбора);
	Иначе
		Элементы.СписокЗадач.ОтборСтрок = Неопределено;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура PartnerПриИзменении(Элемент)
	
	УстановитьОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура StatusПриИзменении(Элемент)
	
	УстановитьОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура TypeПриИзменении(Элемент)
	
	УстановитьОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура ResponsibleПриИзменении(Элемент)
	
	УстановитьОтборы();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияВыбораОтборов()

	Для Каждого Статус Из Объект.Status Цикл	
		Элементы.Status.СписокВыбора.Добавить(Статус.Значение, Статус.Представление);
	КонецЦикла;
	
	Для Каждого Тип Из Объект.Type Цикл	
		Элементы.Type.СписокВыбора.Добавить(Тип.Значение, Тип.Представление);
	КонецЦикла;
	
	Для Каждого Ответственный Из Объект.Responsible Цикл	
		Элементы.Responsible.СписокВыбора.Добавить(Ответственный.Значение, Ответственный.Представление);
	КонецЦикла;
	
	Для Каждого Контрагент Из Объект.Partner Цикл	
		Элементы.Partner.СписокВыбора.Добавить(Контрагент.Значение, Контрагент.Представление);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПолучитьАдресСервера()
	
	Объект.АдресСервера = Константы.АдресСервера.Получить();
	Если Не ЗначениеЗаполнено(Объект.АдресСервера) Тогда
		Константы.АдресСервера.Установить("http://192.168.0.178/task/hs");
		Объект.АдресСервера = "http://192.168.0.178/task/hs";
	КонецЕсли;
		
КонецПроцедуры 

&НаКлиенте
Процедура Настройки(Команда)
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("НастройкиЗавершение", ЭтотОбъект);
	ПараметрыОткрытияФормы = Новый Структура("Объект", Объект);
	ОткрытьФорму("Обработка.МенеджерЗадач.Форма.ФормаНастроек", ПараметрыОткрытияФормы, ЭтаФорма, Истина,,, ОбработкаЗавершения);	
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЗавершение(Ответ, Параметры) Экспорт
			
	ПолучитьАдресСервера();
	Если ЗначениеЗаполнено(Объект.AccessToken) Тогда
		ПолучитьПрава();
		ПолучитьИнформацию();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти



