
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	КопироватьДанныеФормы(Параметры.Объект, ЭтаФорма.Объект);
	
	ЗаполнитьЗначенияВыбора();
	
	Если Параметры.Свойство("СтруктураЗадачи") Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры.СтруктураЗадачи);
		СтатусПоПредставлению(Параметры.СтруктураЗадачи.Status);
		ТипПоПредставлению(Параметры.СтруктураЗадачи.Type);
	Иначе
		ЭтоНовый = Истина;
	КонецЕсли;
	
	УстановитьДоступность();
		
КонецПроцедуры

#Область ИзменениеЗадач

&НаКлиенте
Процедура Сохранить(Команда)
	
	Попытка
		Если ЭтоНовый Тогда
			Результат = СохранитьЗадачу();	
		Иначе
			Результат = ОбновитьЗадачу();
		КонецЕсли; 
		Если Результат = "ОК" Тогда
			Закрыть(Новый Структура("Объект", Объект));
		КонецЕсли;
	Исключение
		Закрыть("ПерейтиКАвторизации");
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура Удалить(Команда)
	
	Попытка
		Результат = УдалитьЗадачу();
		Если Результат = "ОК" Тогда
			Закрыть(Новый Структура("Объект", Объект));
		КонецЕсли;
	Исключение
		Закрыть("ПерейтиКАвторизации");
	КонецПопытки;

КонецПроцедуры

&НаСервере
Функция СохранитьЗадачу(Повтор = Ложь)

	АдресРесурса = СтрШаблон("%1/api/v1/task", Объект.АдресСервера);
	
	Заголовоки = Новый Соответствие;
	Заголовоки.Вставить("Authorization", "Bearer " + Объект.AccessToken);
	
	ДанныеJSON = Новый Структура;
	ДанныеJSON.Вставить("Address", Address);
	ДанныеJSON.Вставить("ApplicationText", ApplicationText);	
	ДанныеJSON.Вставить("Deadline", Deadline);
	ДанныеJSON.Вставить("Initiator", Initiator);
	ДанныеJSON.Вставить("Partner", Partner);
	ДанныеJSON.Вставить("Phone", Phone);
	ДанныеJSON.Вставить("Responsible", Responsible);
	ДанныеJSON.Вставить("Status", Status);
	ДанныеJSON.Вставить("Type", Type);
		
	ДополнительныеПараметрыЗапроса = КоннекторHTTP.НовыеПараметры();
	ДополнительныеПараметрыЗапроса.Заголовки = Заголовоки;
	ДополнительныеПараметрыЗапроса.Json = ДанныеJSON;
	
	Попытка
		Ответ = КоннекторHTTP.Post(АдресРесурса,, ДополнительныеПараметрыЗапроса);
	Исключение		
		Сообщить("Ошибка подключения. Проверьте интернет или обратитесь в поддержку", СтатусСообщения.Важное);
		Возврат "Ошибка";
	КонецПопытки;
	
	Если Ответ.КодСостояния > 300 Тогда				
		Если Ответ.КодСостояния = 401
			ИЛИ Ответ.КодСостояния = 402 Тогда
			
			ОбъектЗнач = РеквизитФормыВЗначение("Объект");
			Попытка
				Если Не Повтор Тогда
					ОбъектЗнач.ОбновитьТокены();
					ЗначениеВРеквизитФормы(ОбъектЗнач, "Объект");
					Возврат ОбновитьЗадачу(Истина);
				Иначе
					ВызватьИсключение "Ошибка авторизации";	
				КонецЕсли;
			Исключение
				ВызватьИсключение "Ошибка авторизации";
			КонецПопытки;
		ИначеЕсли Ответ.КодСостояния = 403 Тогда
			Сообщить("Недостаточно прав для работы с задачами", СтатусСообщения.Важное);
			Возврат "Ошибка";
		Иначе
			Сообщить("Что-то пошло не так. Обратитесь в поддержку", СтатусСообщения.Важное);
			Возврат "Ошибка";
		КонецЕсли;	
	КонецЕсли;
	
	Возврат "ОК";
	
КонецФункции

&НаСервере
Функция ОбновитьЗадачу(Повтор = Ложь)
	
	АдресРесурса = СтрШаблон("%1/api/v1/task/%2", Объект.АдресСервера, ID);
	
	Заголовоки = Новый Соответствие;
	Заголовоки.Вставить("Authorization", "Bearer " + Объект.AccessToken);
	
	ДанныеJSON = Новый Структура;
	ДанныеJSON.Вставить("Address", Address);
	ДанныеJSON.Вставить("ApplicationText", ApplicationText);	
	ДанныеJSON.Вставить("Deadline", Deadline);
	ДанныеJSON.Вставить("Initiator", Initiator);
	ДанныеJSON.Вставить("Partner", Partner);
	ДанныеJSON.Вставить("Phone", Phone);
	ДанныеJSON.Вставить("Responsible", Responsible);
	ДанныеJSON.Вставить("Status", Status);
	ДанныеJSON.Вставить("Type", Type);
		
	ДополнительныеПараметрыЗапроса = КоннекторHTTP.НовыеПараметры();
	ДополнительныеПараметрыЗапроса.Заголовки = Заголовоки;
	ДополнительныеПараметрыЗапроса.Json = ДанныеJSON;
	
	Попытка
		Ответ = КоннекторHTTP.Put(АдресРесурса,, ДополнительныеПараметрыЗапроса);
	Исключение		
		Сообщить("Ошибка подключения. Проверьте интернет или обратитесь в поддержку", СтатусСообщения.Важное);
		Возврат "Ошибка";
	КонецПопытки;
	
	Если Ответ.КодСостояния > 300 Тогда				
		Если Ответ.КодСостояния = 401
			ИЛИ Ответ.КодСостояния = 402 Тогда
			
			ОбъектЗнач = РеквизитФормыВЗначение("Объект");
			Попытка
				Если Не Повтор Тогда
					ОбъектЗнач.ОбновитьТокены();
					ЗначениеВРеквизитФормы(ОбъектЗнач, "Объект");
					Возврат ОбновитьЗадачу(Истина);
				Иначе
					ВызватьИсключение "Ошибка авторизации";	
				КонецЕсли;
			Исключение
				ВызватьИсключение "Ошибка авторизации";
			КонецПопытки;
		ИначеЕсли Ответ.КодСостояния = 403 Тогда
			Сообщить("Недостаточно прав для работы с задачами", СтатусСообщения.Важное);
			Возврат "Ошибка";
		Иначе
			Сообщить("Что-то пошло не так. Обратитесь в поддержку", СтатусСообщения.Важное);
			Возврат "Ошибка";
		КонецЕсли;	
	КонецЕсли;
	
	Возврат "ОК";
	
КонецФункции

&НаСервере
Функция УдалитьЗадачу(Повтор = Ложь)

	АдресРесурса = СтрШаблон("%1/api/v1/task/%2", Объект.АдресСервера, ID);
	
	Заголовоки = Новый Соответствие;
	Заголовоки.Вставить("Authorization", "Bearer " + Объект.AccessToken);
	
	ДополнительныеПараметрыЗапроса = КоннекторHTTP.НовыеПараметры();
	ДополнительныеПараметрыЗапроса.Заголовки = Заголовоки;
	
	Попытка
		Ответ = КоннекторHTTP.Delete(АдресРесурса,, ДополнительныеПараметрыЗапроса);
	Исключение		
		Сообщить("Ошибка подключения. Проверьте интернет или обратитесь в поддержку", СтатусСообщения.Важное);
		Возврат "Ошибка";
	КонецПопытки;
	
	Если Ответ.КодСостояния > 300 Тогда				
		Если Ответ.КодСостояния = 401
			ИЛИ Ответ.КодСостояния = 402 Тогда
			
			ОбъектЗнач = РеквизитФормыВЗначение("Объект");
			Попытка
				Если Не Повтор Тогда
					ОбъектЗнач.ОбновитьТокены();
					ЗначениеВРеквизитФормы(ОбъектЗнач, "Объект");
					Возврат УдалитьЗадачу(Истина);
				Иначе
					ВызватьИсключение "Ошибка авторизации";	
				КонецЕсли;
			Исключение
				ВызватьИсключение "Ошибка авторизации";
			КонецПопытки;
		ИначеЕсли Ответ.КодСостояния = 403 Тогда
			Сообщить("Недостаточно прав для работы с задачами", СтатусСообщения.Важное);
			Возврат "Ошибка";
		Иначе
			Сообщить("Что-то пошло не так. Обратитесь в поддержку", СтатусСообщения.Важное);
			Возврат "Ошибка";
		КонецЕсли;	
	КонецЕсли;
	
	Возврат "ОК";
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СтатусПоПредставлению(Представление)

	Для Каждого Статус Из Элементы.Status.СписокВыбора Цикл
		Если Статус.Представление = Представление Тогда
			Status = Статус.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ТипПоПредставлению(Представление)

	Для Каждого Тип Из Элементы.Type.СписокВыбора Цикл
		Если Тип.Представление = Представление Тогда
			Type = Тип.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьДоступность()
	
	Элементы.Deadline.ТолькоПросмотр = Не Объект.Addition;
	Элементы.Partner.ТолькоПросмотр = Не Объект.Addition;
	Элементы.Initiator.ТолькоПросмотр = Не Объект.Addition;
	Элементы.Address.ТолькоПросмотр = Не Объект.Addition;
	Элементы.Phone.ТолькоПросмотр = Не Объект.Addition;
	Элементы.ApplicationText.ТолькоПросмотр = Не Объект.Addition;
	Элементы.Type.ТолькоПросмотр = Не Объект.Addition;
	Элементы.Responsible.ТолькоПросмотр = Не Объект.Addition;
	
	Элементы.Сохранить.Видимость = Объект.Сhange;
	Элементы.ФормаУдалить.Видимость = Объект.Addition И НЕ ЭтоНовый;
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияВыбора()
	
	Для Каждого Статус Из Объект.Status Цикл	
		Элементы.Status.СписокВыбора.Добавить(Статус.Значение, Статус.Представление);
	КонецЦикла;
	
	Для Каждого Тип Из Объект.Type Цикл	
		Элементы.Type.СписокВыбора.Добавить(Тип.Значение, Тип.Представление);
	КонецЦикла;
	
	Для Каждого Ответственный Из Объект.Responsible Цикл	
		Элементы.Responsible.СписокВыбора.Добавить(Ответственный.Значение, Ответственный.Представление);
	КонецЦикла;
	
	Для Каждого Контрагент Из Объект.Partner Цикл	
		Элементы.Partner.СписокВыбора.Добавить(Контрагент.Значение, Контрагент.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	СтандартнаяОбработка= Ложь;
	Закрыть(Новый Структура("Объект", Объект));
	
КонецПроцедуры

#КонецОбласти

